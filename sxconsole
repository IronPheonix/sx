#!/usr/bin/env python
"""
This is the main script that will extract reports and then run various
plugins on them.

All reports have to be a a compressed tarfile of type bzip2/gunzip.

@author    :  Shane Bradley
@contact   :  sbradley@redhat.com
@version   :  2.17
@copyright :  GPLv2
"""
import sys
import os.path
from optparse import OptionParser, Option
import logging

import sx
from sx.logwriter import LogWriter
import sx.sxconsole
from sx.sxconsole import SXConsole
from sx.reports import ReportsHelper
from sx.plugins import PluginsHelper
"""
@cvar VERSION_NUMBER: The current version number of sxconsole.
@type VERSION_NUMBER: String
"""
VERSION_NUMBER = "2.17-2"

# ##############################################################################
# Get user selected options
# ##############################################################################
def __getOptions(version) :
    """
    This function creates the OptionParser and returns commandline
    option and command args(thus 2 variables are returned).

    The cmdlineOpts which is the options user selected and cmdLineArgs
    which is value passed not associated with an option.

    @return: An SXOptions object that contains the options to run this
    function.
    @rtype: SXOptions

    @param version: The version of the this script.
    @type version: String
    """
    cmdParser = OptionParserExtended(version)
    cmdParser.add_option("-d", "--debug",
                         action="store_true",
                         dest="enableDebugLogging",
                         help="Enables debug logging.",
                         default=False)
    cmdParser.add_option("-M", "--modified_layout",
                         action="store_true",
                         dest="modifiedArchiveLayout",
                         help="Enables a modified layout of the archive directory.",
                         default=False)
    cmdParser.add_option("-t", "--timestamp",
                         action="store",
                         dest="timestamp",
                         help="Set the unique timestamp directory for the extracted reports.(Format of the timestamp: %Y-%m-%d_%H%M%S)",
                         type="string",
                         default="")
    cmdParser.add_option("-r", "--report",
                         action="extend",
                         dest="listOfReports",
                         help="Full Path to report file that will be extracted by sxconsole(multiple reports can be used with -r  or comma seperated).",
                         type="string",
                         default=[])
    cmdParser.add_option("-R", "--report_path",
                         action="store",
                         dest="reportPath",
                         help="Path to directory where reports are located that can be ran against this tool.",
                         type="string",
                         default="%s" %(os.path.join(os.environ["HOME"], "tmp")))
    cmdParser.add_option("-a", "--archive_path",
                         action="store",
                         dest="archivePath",
                         help="Path that will be used to archive the extracted reports.(default: ~/sxarchive).",
                         type="string",
                         default="%s" %(os.path.join(os.environ["HOME"], "sxarchive")))
    cmdParser.add_option("-p", "--path_extracted_reports",
                         action="store",
                         dest="pathToExtractedReports",
                         help="Path that will run plugins on reports that have already been extracted.",
                         type="string",
                         default="")
    cmdParser.add_option("-f", "--misc_files",
                         action="extend",
                         dest="filePathArray",
                         help="Misc files to be add to the archived reports(non report files).",
                         type="string",
                         default=[])
    cmdParser.add_option("-m", "--listmodules",
                         action="store_true",
                         dest="listModules",
                         help="Display list of plugins and report types that currently installed.",
                         default=False)
    cmdParser.add_option("-E", "--enable_all_plugins",
                         action="store_true",
                         dest="enableAllPlugins",
                         help="Enables all plugins.",
                         default=False)
    cmdParser.add_option("-e", "--enable_plugin",
                         action="extend",
                         dest="enablePlugins",
                         help="List of plugins that will be enabled.",
                         type="string",
                         default=[])
    cmdParser.add_option("-N", "--disable_all_plugins",
                         action="store_true",
                         dest="disableAllPlugins",
                         help="Disables all plugins.",
                         default=False)
    cmdParser.add_option("-n", "--disable_plugin",
                         action="extend",
                         dest="disablePlugins",
                         help="List of plugins that will be disabled.",
                         type="string",
                         default=[])
    cmdParser.add_option("-U", "--disable_user_modules",
                         action="store_true",
                         dest="disableUserDefinedModules",
                         help="Disables support for user defined report types and plugins(path: ~/.sx/[reports/plugins]).",
                         default=False)
    cmdParser.add_option("-o", "--plugin_options",
                         action="extend",
                         dest="pluginOptions",
                         help="options that will be applied to plugin(s) which will over ride the defaults.",
                         type="string",
                         default=[])

    (cmdLineOpts, cmdLineArgs) = cmdParser.parse_args()
    return (cmdLineOpts, cmdLineArgs)

# ##############################################################################
# OptParse classes for commandline options
# ##############################################################################
class OptionParserExtended(OptionParser):
    """
    This is the class that gets the command line options the end user
    selects.
    """
    def __init__(self, version) :
        """
        @param version: The version of the this script.
        @type version: String
        """
        self.__commandName = os.path.basename(sys.argv[0])
        versionMessage = "%s %s\n" %(self.__commandName, version)
        versionMessage += "This program was written by Shane Bradley(sbradley@redhat.com): https://fedorahosted.org/sx\n"

        commandDescription  ="%s will extract different report types to an "%(self.__commandName)
        commandDescription += "archived directory and archive the report file.\n"
        commandDescription += "Then various plugins can be enabled or disabled to run diagnostics on the reports.\n\n"

        OptionParser.__init__(self, option_class=ExtendOption,
                              version=versionMessage,
                              description=commandDescription)

    def print_help(self):
        """
        Print examples at the bottom of the help message.
        """
        self.print_version()
        layoutDescription = "\n\nArchive Layout Description:\n\n"
        layoutDescription += "The default layout of the archive files looks like the following:\n"
        layoutDescription += "\tCompressed Reports Path:   ~/sxarchive/creports/15555553/2.17-04-18_123703\n"
        layoutDescription += "\tExtracted Reports Path:    ~/sxarchive/ereports/15555553/2.17-04-18_123703\n"
        layoutDescription += "\tNon-report Files Path:     ~/sxarchive/ereports/15555553/files\n"
        layoutDescription += "\tPlugin Report Files Path:  ~/sxarchive/ereports/15555553/2.17-04-18_123703/reports\n\n"

        layoutDescription += "The modified layout of the archive files looks like the following(when -M option is enabled):\n"
        layoutDescription += "\tCompressed Reports Path:   ~/sxarchive/15555553/2.17-04-18_123703/.creports\n"
        layoutDescription += "\tExtracted Reports Path:    ~/sxarchive/15555553/2.17-04-18_123703\n"
        layoutDescription += "\tNon-report Files Path:     ~/sxarchive/15555553/files\n"
        layoutDescription += "\tPlugin Report Files Path:  ~/sxarchive/15555553/2.17-04-18_123703/reports\n\n"

        examplesMessage =  "Examples:\n\n"
        examplesMessage += "To list the different plugin and report types:\n"
        examplesMessage += "$ %s -m\n\n" %(self.__commandName)
        examplesMessage += "To run default plugins on selected reports and disable user defined reports/plugins:\n"
        examplesMessage += "$ %s 15555553 -r ~/tmp/rh4node1-sysreport.tar.bz2 -r ~/tmp/rh4node2-sysreport.tar.bz2 -U\n\n" %(self.__commandName)
        examplesMessage += "To run default plugins on directory of reports(non-reports will not be processed):\n"
        examplesMessage += "$ %s 15555553 -R ~/tmp/\n\n" %(self.__commandName)
        examplesMessage += "To disable all plugins on selected reports:\n"
        examplesMessage += "$ %s 15555553 -N -r ~/tmp/rh4node1-sysreport.tar.bz2 -r ~/tmp/rh4node2-sysreport.tar.bz2\n\n" %(self.__commandName)
        examplesMessage += "To enable all plugins on directory of reports(non-reports will not be processed):\n"
        examplesMessage += "$ %s 15555553 -E -R ~/tmp/\n\n" %(self.__commandName)
        examplesMessage += "To disable all plugins then enable specific plugins on directory of reports(non-reports will not be processed):\n"
        examplesMessage += "$ %s 15555553 -N -e cluster,checksysreport -R ~/tmp/\n\n" %(self.__commandName)
        examplesMessage += "To enable all plugins then disable specific plugins on directory of reports(non-reports will not be processed):\n"
        examplesMessage += "$ %s 15555553 -E -n cluster,checksysreport -R ~/tmp/\n\n" %(self.__commandName)
        examplesMessage += "To add a file to the archive that is not a report that will also do action on reports:\n"
        examplesMessage += "$ %s 15555553 -N -e cluster,checksysreport -R ~/tmp/ -f ~/tmp/tcpdump.log\n\n" %(self.__commandName)
        examplesMessage += "To add a file to the archive that is not a report with no reports to process:\n"
        examplesMessage += "$ %s 15555553 -f ~/tmp/tcpdump2.log\n\n" %(self.__commandName)
        examplesMessage += "After extraction is complete then open with a fileviewer and pass the option for a particular fileviewer.\n"
        examplesMessage += "$ %s 15555553 -e OpenSOSReport -o OpenSOSReport.fileviewer=konqueror\n\n" %(self.__commandName)
        examplesMessage += "To run the cluster and the checksysreport plugin against a previously extracted report:\n"
        examplesMessage += "$ %s -p ~/sxarchive/ereports/15555553/2.17-01-26_160247 -e cluster,checksysreport\n\n" %(self.__commandName)
        examplesMessage += "To run default plugins on directory of reports(non-reports will not be processed) and use the modified archived layout:\n"
        examplesMessage += "$ %s 15555553 -R ~/tmp/ -M\n\n" %(self.__commandName)
        examplesMessage += "To run the cluster and the checksysreport plugin against a previously extracted report that used the modified layout scheme:\n"
        examplesMessage += "$ %s -p ~/sxarchive/ereports/15555553/2.17-01-26_160247 -e cluster,checksysreport -M\n\n" %(self.__commandName)
        OptionParser.print_help(self)
        print layoutDescription
        print examplesMessage

class ExtendOption (Option):
        """
        Allow to specify comma delimited list of entries for arrays
        and dictionaries.
        """
        ACTIONS = Option.ACTIONS + ("extend",)
        STORE_ACTIONS = Option.STORE_ACTIONS + ("extend",)
        TYPED_ACTIONS = Option.TYPED_ACTIONS + ("extend",)

        def take_action(self, action, dest, opt, value, values, parser):
            """
            This function is a wrapper to take certain options passed
            on command prompt and wrap them into an Array.

            @param action: The type of action that will be taken. For
            example: "store_true", "store_false", "extend".
            @type action: String
            @param dest: The name of the variable that will be used to
            store the option.
            @type dest: String/Boolean/Array
            @param opt: The option string that triggered the action.
            @type opt: String
            @param value: The value of opt(option) if it takes a
            value, if not then None.
            @type value:
            @param values: All the opt(options) in a dictionary.
            @type values: Dictionary
            @param parser: The option parser that was orginally called.
            @type parser: OptionParser
            """
            if (action == "extend") :
                valueList=[]
                try:
                    for v in value.split(","):
                        if ((opt == "-r") or (opt == "--report") or
                            (opt == "-f") or (opt == "--misc_files")) :
                            if (v[0] == '~' and not os.path.exists(v)):
                                v = os.path.expanduser(v)
                            elif (not v[0] == '/' and not os.path.exists(v)):
                                v = os.path.abspath(v)

                            if (os.path.exists(v)) :
                                # only append paths that exists.
                                valueList.append(v)
                            else:
                                message = "The filepath does not exist: %s" %(v)
                                logging.getLogger(sx.MAIN_LOGGER_NAME).error(message)
                        elif ((opt == "-o") or (opt == "--pluginOptions")):
                            # Verify that is the format: key=value, where key is of format parent.optionname
                            # Example: Opensosreport.browser=konqueror
                            keyEqualSplit = v.split("=")
                            peroidEqualSplit = v.split(".")
                            if ((len(keyEqualSplit) == 2) and (len(peroidEqualSplit) == 2)) :
                                valueList.append(v)
                            else:
                                logging.getLogger(sx.MAIN_LOGGER_NAME).error("The plugin option has invalid syntax:" %(v))
                        elif ((opt == "-e") or (opt == "--enable_plugin") or
                              (opt == "-n") or (opt == "--disable_plugin")) :
                            if ((v == "clusterha") or (v == "cluster")):
                                valueList.append("cluster")
                            else:
                                valueList.append(v)
                        else:
                            # append everything else that does not deal with paths
                            valueList.append(v)
                except:
                    pass
                else:
                    values.ensure_value(dest, []).extend(valueList)
            else:
                Option.take_action(self, action, dest, opt, value, values, parser)

# ###############################################################################
# Main Function
# ###############################################################################
if __name__ == "__main__":
    # #######################################################################
    # Setup the logger
    # #######################################################################
    try:
        sxconsole = SXConsole()
        (cmdLineOpts, cmdLineArgs) = __getOptions(VERSION_NUMBER)
        # #######################################################################
        # List the plugins if option enabled
        # #######################################################################
        # Print list of plugins if selected and exit
        if (cmdLineOpts.listModules):
            versionMessage = "%s %s\n" %(os.path.basename(sys.argv[0]), VERSION_NUMBER)
            versionMessage += "This program was written by Shane Bradley(sbradley@redhat.com): https://fedorahosted.org/sx \n"
            print versionMessage
            reportsHelper = ReportsHelper()
            reportsHelper.printReportsList(includeUserReports=(not cmdLineOpts.disableUserDefinedModules))
            pluginsHelper = PluginsHelper()
            pluginsHelper.printPluginsList(includeUserPlugins=(not cmdLineOpts.disableUserDefinedModules))
            sys.exit()
        # Verify a uid was given unless path is given.
        uid = ""
        if (len(cmdLineArgs) > 0):
            uid = cmdLineArgs[0]

        # Convert the options result instance into a map with "var".
        sxconsole.run(vars(cmdLineOpts), uid)

    except KeyboardInterrupt:
        message =  "This script will exit since control-c was executed by end user."
        logging.getLogger(sx.MAIN_LOGGER_NAME).error(message)
        sys.exit(2)
    except Exception, e:
        import time
        import traceback
        errorString = ""
        errorString += "Date:            %s\n" %(time.strftime("%Y-%m-%d %H:%M:%S"))
        errorString += "Command:         %s-%s\n" %(os.path.basename(sys.argv[0]), VERSION_NUMBER)
        errorString += "Path to Command: %s\n" %(sys.argv[0])
        errorString += "Arguments:       "
        # Add Arguments to the string
        if (len(sys.argv) > 1):
            for index in range(1, len(sys.argv)):
                errorString += "%s " %(sys.argv[index])
            errorString += "\n"
        tb = traceback.format_exc()
        # Add formatted traceback
        errorString += "\nTraceBack: \n"
        for line in tb.split("\n"):
            errorString += "   %s\n" %(line)
        # Write the ouput to a file.
        pathToErrorFile = "/tmp/%s-%s-%s.txt" %(os.path.basename(sys.argv[0]), time.strftime("%Y-%m-%d"), int(time.time()))
        message =  "An error occurred and a debug file containing the error will be written to the file: %s" %(pathToErrorFile)
        logging.getLogger(sx.MAIN_LOGGER_NAME).error(message)
        try:
            fout = open(pathToErrorFile, "w")
            fout.write(errorString + "\n")
            fout.close()
        except UnicodeEncodeError:
            message = "There was a unicode encode error on file: %s." %(pathToErrorFile)
            logging.getLogger(sx.MAIN_LOGGER_NAME).error(message)
            message = "The data that was going to be written to the file is below: \n%s" %(errorString)
            logging.getLogger(sx.MAIN_LOGGER_NAME).info(message)
        except IOError:
            message = "There was an error writing the file: %s." %(pathToErrorFile)
            logging.getLogger(sx.MAIN_LOGGER_NAME).error(message)
            message = "The data that was going to be written to the file is below: \n%s" %(errorString)
            logging.getLogger(sx.MAIN_LOGGER_NAME).info(message)
        print errorString
        sys.exit(2)

    # #######################################################################
    # Exit the application with zero exit code since we cleanly exited.
    # #######################################################################
    sys.exit()
